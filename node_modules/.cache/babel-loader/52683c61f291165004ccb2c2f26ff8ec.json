{"ast":null,"code":"import _defineProperty from \"/Users/drashti/Documents/Drashti workshop/assessment---kwitter-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { domain, jsonHeaders, handleJsonResponse } from \"./constants\";\nimport { DELETEMESSAGE, GETMESSAGELIST, GETONEMESSAGE, POSTMESSAGE } from \"../actionTypes\";\nvar url = domain + \"/messages\";\nexport var deleteMessage = function deleteMessage(messageId) {\n  return function (dispatch) {\n    dispatch({\n      type: DELETEMESSAGE.START\n    });\n    return fetch(url + \"/\".concat(messageId), {\n      method: \"DELETE\",\n      headers: jsonHeaders,\n      body: JSON.stringify(messageId)\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: DELETEMESSAGE.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: DELETEMESSAGE.FAIL,\n        payload: err\n      }));\n    });\n  };\n}; //kwitter-api.herokuapp.com/messages?limit=100&offset=0&username=test\n\nexport var getMessageList = function getMessageList(messageData) {\n  return function (dispatch) {\n    dispatch({\n      type: GETMESSAGELIST.START\n    });\n    return fetch(url + \"?limit=30\", {\n      method: \"GET\",\n      headers: jsonHeaders,\n      body: JSON.stringify(messageData)\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: GETMESSAGELIST.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: GETMESSAGELIST.FAIL,\n        payload: err\n      }));\n    });\n  };\n};\nexport var getOneMessage = function getOneMessage(messageId) {\n  return function (dispatch) {\n    dispatch({\n      type: GETONEMESSAGE.START\n    });\n    return fetch(url + \"/\".concat(messageId), {\n      method: \"GET\",\n      headers: jsonHeaders,\n      body: JSON.stringify(messageId)\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: GETONEMESSAGE.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: GETONEMESSAGE.FAIL,\n        payload: err\n      }));\n    });\n  };\n};\nexport var postMessage = function postMessage(messageData) {\n  return function (dispatch) {\n    dispatch({\n      type: POSTMESSAGE.START\n    }); //********************************************************\n    //\n    //     the token below is hard coded until we can figure out how to\n    //      dynamically get the token from the Redux store.  a token HAS to\n    //      accompany all message posts.\n    //\n    //**********************************************************\n\n    var token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1NzQzMzUzODAsImV4cCI6MTU3NDQyMTc4MH0.nt6Yp6daziuZ6HXZsh4emkEhXPmoQsr10jum4Nej4qM\";\n    return fetch(url, {\n      method: \"POST\",\n      headers: _objectSpread({}, jsonHeaders, {\n        Authorization: \"Bearer \" + token\n      }),\n      body: JSON.stringify(messageData)\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: POSTMESSAGE.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: POSTMESSAGE.FAIL,\n        payload: err\n      }));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/drashti/Documents/Drashti workshop/assessment---kwitter-frontend/src/redux/actionCreators/messages.js"],"names":["domain","jsonHeaders","handleJsonResponse","DELETEMESSAGE","GETMESSAGELIST","GETONEMESSAGE","POSTMESSAGE","url","deleteMessage","messageId","dispatch","type","START","fetch","method","headers","body","JSON","stringify","then","result","SUCCESS","payload","catch","err","Promise","reject","FAIL","getMessageList","messageData","getOneMessage","postMessage","token","Authorization"],"mappings":"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","sourcesContent":["import { domain, jsonHeaders, handleJsonResponse } from \"./constants\";\nimport {\n  DELETEMESSAGE,\n  GETMESSAGELIST,\n  GETONEMESSAGE,\n  POSTMESSAGE\n} from \"../actionTypes\";\n\nconst url = domain + \"/messages\";\n\nexport const deleteMessage = messageId => dispatch => {\n  dispatch({\n    type: DELETEMESSAGE.START\n  });\n  return fetch(url + `/${messageId}`, {\n    method: \"DELETE\",\n    headers: jsonHeaders,\n    body: JSON.stringify(messageId)\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: DELETEMESSAGE.SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(\n        dispatch({ type: DELETEMESSAGE.FAIL, payload: err })\n      );\n    });\n};\n//kwitter-api.herokuapp.com/messages?limit=100&offset=0&username=test\nexport const getMessageList = messageData => dispatch => {\n  dispatch({\n    type: GETMESSAGELIST.START\n  });\n  return fetch(url + \"?limit=30\", {\n    method: \"GET\",\n    headers: jsonHeaders,\n    body: JSON.stringify(messageData)\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: GETMESSAGELIST.SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(\n        dispatch({ type: GETMESSAGELIST.FAIL, payload: err })\n      );\n    });\n};\nexport const getOneMessage = messageId => dispatch => {\n  dispatch({\n    type: GETONEMESSAGE.START\n  });\n  return fetch(url + `/${messageId}`, {\n    method: \"GET\",\n    headers: jsonHeaders,\n    body: JSON.stringify(messageId)\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: GETONEMESSAGE.SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(\n        dispatch({ type: GETONEMESSAGE.FAIL, payload: err })\n      );\n    });\n};\nexport const postMessage = messageData => dispatch => {\n  dispatch({\n    type: POSTMESSAGE.START\n  });\n  //********************************************************\n  //\n  //     the token below is hard coded until we can figure out how to\n  //      dynamically get the token from the Redux store.  a token HAS to\n  //      accompany all message posts.\n  //\n  //**********************************************************\n  const token =\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRlc3QiLCJpYXQiOjE1NzQzMzUzODAsImV4cCI6MTU3NDQyMTc4MH0.nt6Yp6daziuZ6HXZsh4emkEhXPmoQsr10jum4Nej4qM\";\n  return fetch(url, {\n    method: \"POST\",\n    headers: { ...jsonHeaders, Authorization: \"Bearer \" + token },\n    body: JSON.stringify(messageData)\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: POSTMESSAGE.SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(dispatch({ type: POSTMESSAGE.FAIL, payload: err }));\n    });\n};\n"]},"metadata":{},"sourceType":"module"}