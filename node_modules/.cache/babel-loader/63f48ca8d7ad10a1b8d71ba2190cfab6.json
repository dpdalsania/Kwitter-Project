{"ast":null,"code":"import { domain, jsonHeaders, handleJsonResponse } from \"./constants\";\nimport { GETUSER, POSTUSER } from \"../actionTypes\";\nimport { login } from \"./auth\";\nvar url = domain + \"/users\";\nexport var getUser = function getUser(userName) {\n  return function (dispatch) {\n    dispatch({\n      type: GETUSER.START\n    });\n    return fetch(url + \"/\" + userName, {\n      method: \"GET\",\n      headers: jsonHeaders\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: GETUSER.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: GETUSER.FAIL,\n        payload: err\n      }));\n    });\n  };\n};\n\nvar _postUser = function _postUser(registerData) {\n  return function (dispatch) {\n    dispatch({\n      type: POSTUSER.START\n    });\n    return fetch(url, {\n      method: \"POST\",\n      headers: jsonHeaders,\n      body: JSON.stringify(registerData)\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: POSTUSER.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: POSTUSER.FAIL,\n        payload: err\n      }));\n    });\n  };\n};\n\nexport var postUser = function postUser(registerData) {\n  return function (dispatch) {\n    return dispatch(_postUser(registerData)).then(function () {\n      return dispatch(login({\n        username: registerData.username,\n        password: registerData.password\n      }));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/drashti/Documents/Drashti workshop/assessment---kwitter-frontend/src/redux/actionCreators/users.js"],"names":["domain","jsonHeaders","handleJsonResponse","GETUSER","POSTUSER","login","url","getUser","userName","dispatch","type","START","fetch","method","headers","then","result","SUCCESS","payload","catch","err","Promise","reject","FAIL","_postUser","registerData","body","JSON","stringify","postUser","username","password"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,WAAjB,EAA8BC,kBAA9B,QAAwD,aAAxD;AACA,SAASC,OAAT,EAAkBC,QAAlB,QAAkC,gBAAlC;AACA,SAASC,KAAT,QAAsB,QAAtB;AAEA,IAAMC,GAAG,GAAGN,MAAM,GAAG,QAArB;AAEA,OAAO,IAAMO,OAAO,GAAG,SAAVA,OAAU,CAAAC,QAAQ;AAAA,SAAI,UAAAC,QAAQ,EAAI;AAC7CA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEP,OAAO,CAACQ;AADP,KAAD,CAAR;AAIA,WAAOC,KAAK,CAACN,GAAG,GAAG,GAAN,GAAYE,QAAb,EAAuB;AACjCK,MAAAA,MAAM,EAAE,KADyB;AAEjCC,MAAAA,OAAO,EAAEb;AAFwB,KAAvB,CAAL,CAIJc,IAJI,CAICb,kBAJD,EAKJa,IALI,CAKC,UAAAC,MAAM,EAAI;AACd,aAAOP,QAAQ,CAAC;AACdC,QAAAA,IAAI,EAAEP,OAAO,CAACc,OADA;AAEdC,QAAAA,OAAO,EAAEF;AAFK,OAAD,CAAf;AAID,KAVI,EAWJG,KAXI,CAWE,UAAAC,GAAG,EAAI;AACZ,aAAOC,OAAO,CAACC,MAAR,CAAeb,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEP,OAAO,CAACoB,IAAhB;AAAsBL,QAAAA,OAAO,EAAEE;AAA/B,OAAD,CAAvB,CAAP;AACD,KAbI,CAAP;AAcD,GAnB8B;AAAA,CAAxB;;AAqBP,IAAMI,SAAS,GAAG,SAAZA,SAAY,CAAAC,YAAY;AAAA,SAAI,UAAAhB,QAAQ,EAAI;AAC5CA,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEN,QAAQ,CAACO;AAAjB,KAAD,CAAR;AAEA,WAAOC,KAAK,CAACN,GAAD,EAAM;AAChBO,MAAAA,MAAM,EAAE,MADQ;AAEhBC,MAAAA,OAAO,EAAEb,WAFO;AAGhByB,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,YAAf;AAHU,KAAN,CAAL,CAKJV,IALI,CAKCb,kBALD,EAMJa,IANI,CAMC,UAAAC,MAAM,EAAI;AACd,aAAOP,QAAQ,CAAC;AACdC,QAAAA,IAAI,EAAEN,QAAQ,CAACa,OADD;AAEdC,QAAAA,OAAO,EAAEF;AAFK,OAAD,CAAf;AAID,KAXI,EAYJG,KAZI,CAYE,UAAAC,GAAG,EAAI;AACZ,aAAOC,OAAO,CAACC,MAAR,CAAeb,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEN,QAAQ,CAACmB,IAAjB;AAAuBL,QAAAA,OAAO,EAAEE;AAAhC,OAAD,CAAvB,CAAP;AACD,KAdI,CAAP;AAeD,GAlB6B;AAAA,CAA9B;;AAoBA,OAAO,IAAMS,QAAQ,GAAG,SAAXA,QAAW,CAAAJ,YAAY;AAAA,SAAI,UAAAhB,QAAQ,EAAI;AAClD,WAAOA,QAAQ,CAACe,SAAS,CAACC,YAAD,CAAV,CAAR,CAAkCV,IAAlC,CAAuC;AAAA,aAC5CN,QAAQ,CACNJ,KAAK,CAAC;AACJyB,QAAAA,QAAQ,EAAEL,YAAY,CAACK,QADnB;AAEJC,QAAAA,QAAQ,EAAEN,YAAY,CAACM;AAFnB,OAAD,CADC,CADoC;AAAA,KAAvC,CAAP;AAQD,GATmC;AAAA,CAA7B","sourcesContent":["import { domain, jsonHeaders, handleJsonResponse } from \"./constants\";\nimport { GETUSER, POSTUSER } from \"../actionTypes\";\nimport { login } from \"./auth\";\n\nconst url = domain + \"/users\";\n\nexport const getUser = userName => dispatch => {\n  dispatch({\n    type: GETUSER.START\n  });\n\n  return fetch(url + \"/\" + userName, {\n    method: \"GET\",\n    headers: jsonHeaders\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: GETUSER.SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(dispatch({ type: GETUSER.FAIL, payload: err }));\n    });\n};\n\nconst _postUser = registerData => dispatch => {\n  dispatch({ type: POSTUSER.START });\n\n  return fetch(url, {\n    method: \"POST\",\n    headers: jsonHeaders,\n    body: JSON.stringify(registerData)\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: POSTUSER.SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(dispatch({ type: POSTUSER.FAIL, payload: err }));\n    });\n};\n\nexport const postUser = registerData => dispatch => {\n  return dispatch(_postUser(registerData)).then(() =>\n    dispatch(\n      login({\n        username: registerData.username,\n        password: registerData.password\n      })\n    )\n  );\n};\n"]},"metadata":{},"sourceType":"module"}