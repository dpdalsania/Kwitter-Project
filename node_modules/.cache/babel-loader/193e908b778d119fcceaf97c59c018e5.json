{"ast":null,"code":"import _defineProperty from \"/Users/drashti/Documents/Drashti workshop/assessment---kwitter-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { domain, jsonHeaders, handleJsonResponse } from \"./constants\";\nimport { DELETEMESSAGE, GETMESSAGES, POSTMESSAGE, GETSPECIFICUSERMESSAGES } from \"../actionTypes\";\nvar url = domain + \"/messages\";\nexport var deleteMessage = function deleteMessage(messageId) {\n  return function (dispatch) {\n    dispatch({\n      type: DELETEMESSAGE.START\n    });\n    return fetch(url + \"/\".concat(messageId), {\n      method: \"DELETE\",\n      headers: jsonHeaders,\n      body: JSON.stringify(messageId)\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: DELETEMESSAGE.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: DELETEMESSAGE.FAIL,\n        payload: err\n      }));\n    });\n  };\n}; //kwitter-api.herokuapp.com/messages?limit=100&offset=0&username=test\n\nexport var getMessages = function getMessages() {\n  return function (dispatch) {\n    dispatch({\n      type: GETMESSAGES.START\n    });\n    return fetch(url + \"?limit=30\", {\n      method: \"GET\",\n      headers: jsonHeaders\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: GETMESSAGES.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: GETMESSAGES.FAIL,\n        payload: err\n      }));\n    });\n  };\n};\nexport var getSpecificUserMessages = function getSpecificUserMessages(userId) {\n  return function (dispatch) {\n    dispatch({\n      type: GETSPECIFICUSERMESSAGES.START\n    });\n    return fetch(url + \"?limit=100&offset=0&username=\" + userId, {\n      method: \"GET\",\n      headers: jsonHeaders\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: GETSPECIFICUSERMESSAGES.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: GETSPECIFICUSERMESSAGES.FAIL,\n        payload: err\n      }));\n    });\n  };\n};\nexport var postMessage = function postMessage(messageData) {\n  return function (dispatch) {\n    dispatch({\n      type: POSTMESSAGE.START\n    });\n    var token = JSON.parse(localStorage.login).result.token;\n    return fetch(url, {\n      method: \"POST\",\n      headers: _objectSpread({}, jsonHeaders, {\n        Authorization: \"Bearer \" + token\n      }),\n      body: JSON.stringify(messageData)\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: POSTMESSAGE.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: POSTMESSAGE.FAIL,\n        payload: err\n      }));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/drashti/Documents/Drashti workshop/assessment---kwitter-frontend/src/redux/actionCreators/messages.js"],"names":["domain","jsonHeaders","handleJsonResponse","DELETEMESSAGE","GETMESSAGES","POSTMESSAGE","GETSPECIFICUSERMESSAGES","url","deleteMessage","messageId","dispatch","type","START","fetch","method","headers","body","JSON","stringify","then","result","SUCCESS","payload","catch","err","Promise","reject","FAIL","getMessages","getSpecificUserMessages","userId","postMessage","messageData","token","parse","localStorage","login","Authorization"],"mappings":"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","sourcesContent":["import { domain, jsonHeaders, handleJsonResponse } from \"./constants\";\nimport {\n  DELETEMESSAGE,\n  GETMESSAGES,\n  POSTMESSAGE,\n  GETSPECIFICUSERMESSAGES\n} from \"../actionTypes\";\n\nconst url = domain + \"/messages\";\n\nexport const deleteMessage = messageId => dispatch => {\n  dispatch({\n    type: DELETEMESSAGE.START\n  });\n  return fetch(url + `/${messageId}`, {\n    method: \"DELETE\",\n    headers: jsonHeaders,\n    body: JSON.stringify(messageId)\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: DELETEMESSAGE.SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(\n        dispatch({ type: DELETEMESSAGE.FAIL, payload: err })\n      );\n    });\n};\n//kwitter-api.herokuapp.com/messages?limit=100&offset=0&username=test\nexport const getMessages = () => dispatch => {\n  dispatch({\n    type: GETMESSAGES.START\n  });\n  return fetch(url + \"?limit=30\", {\n    method: \"GET\",\n    headers: jsonHeaders\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: GETMESSAGES.SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(dispatch({ type: GETMESSAGES.FAIL, payload: err }));\n    });\n};\n\nexport const getSpecificUserMessages = userId => dispatch => {\n  dispatch({\n    type: GETSPECIFICUSERMESSAGES.START\n  });\n  return fetch(url + \"?limit=100&offset=0&username=\" + userId, {\n    method: \"GET\",\n    headers: jsonHeaders\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: GETSPECIFICUSERMESSAGES.SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(\n        dispatch({ type: GETSPECIFICUSERMESSAGES.FAIL, payload: err })\n      );\n    });\n};\n\nexport const postMessage = messageData => dispatch => {\n  dispatch({\n    type: POSTMESSAGE.START\n  });\n\n  const token = JSON.parse(localStorage.login).result.token;\n\n  return fetch(url, {\n    method: \"POST\",\n    headers: { ...jsonHeaders, Authorization: \"Bearer \" + token },\n    body: JSON.stringify(messageData)\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: POSTMESSAGE.SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(dispatch({ type: POSTMESSAGE.FAIL, payload: err }));\n    });\n};\n"]},"metadata":{},"sourceType":"module"}