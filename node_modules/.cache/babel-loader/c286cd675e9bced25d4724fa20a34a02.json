{"ast":null,"code":"import _defineProperty from \"/Users/drashti/Documents/Drashti workshop/assessment---kwitter-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { domain, jsonHeaders, handleJsonResponse } from \"./constants\";\nimport { DELETEMESSAGE, GETMESSAGES, POSTMESSAGE } from \"../actionTypes\";\nvar url = domain + \"/messages\";\nexport var _deleteMessage = function _deleteMessage(messageId, token) {\n  return function (dispatch) {\n    dispatch({\n      type: DELETEMESSAGE.START\n    });\n    return fetch(url + \"/\".concat(messageId), {\n      method: \"DELETE\",\n      headers: _objectSpread({}, jsonHeaders, {\n        Authorization: \"Bearer \" + token\n      }),\n      body: JSON.stringify(messageId)\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: DELETEMESSAGE.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: DELETEMESSAGE.FAIL,\n        payload: err\n      }));\n    });\n  };\n};\nexport var deleteMessage = function deleteMessage(messageId, token, requestTag) {\n  return function (dispatch) {\n    return dispatch(_deleteMessage(messageId, token)).then(function () {\n      return dispatch(getMessages(requestTag));\n    });\n  };\n}; //kwitter-api.herokuapp.com/messages?limit=100&offset=0&username=test\n\nexport var getMessages = function getMessages(requestTag) {\n  return function (dispatch) {\n    dispatch({\n      type: GETMESSAGES.START\n    });\n    return fetch(url + requestTag, {\n      method: \"GET\",\n      headers: jsonHeaders\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: GETMESSAGES.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: GETMESSAGES.FAIL,\n        payload: err\n      }));\n    });\n  };\n};\n\nvar _postMessage = function _postMessage(messageData) {\n  return function (dispatch) {\n    dispatch({\n      type: POSTMESSAGE.START\n    });\n    var token = JSON.parse(localStorage.login).result.token;\n    return fetch(url, {\n      method: \"POST\",\n      headers: _objectSpread({}, jsonHeaders, {\n        Authorization: \"Bearer \" + token\n      }),\n      body: JSON.stringify(messageData)\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: POSTMESSAGE.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: POSTMESSAGE.FAIL,\n        payload: err\n      }));\n    });\n  };\n};\n\nexport var postMessage = function postMessage(messageBody, requestTag) {\n  return function (dispatch) {\n    return dispatch(_postMessage(messageBody)).then(function () {\n      return dispatch(getMessages(requestTag));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/drashti/Documents/Drashti workshop/assessment---kwitter-frontend/src/redux/actionCreators/messages.js"],"names":["domain","jsonHeaders","handleJsonResponse","DELETEMESSAGE","GETMESSAGES","POSTMESSAGE","url","_deleteMessage","messageId","token","dispatch","type","START","fetch","method","headers","Authorization","body","JSON","stringify","then","result","SUCCESS","payload","catch","err","Promise","reject","FAIL","deleteMessage","requestTag","getMessages","_postMessage","messageData","parse","localStorage","login","postMessage","messageBody"],"mappings":"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","sourcesContent":["import { domain, jsonHeaders, handleJsonResponse } from \"./constants\";\nimport { DELETEMESSAGE, GETMESSAGES, POSTMESSAGE } from \"../actionTypes\";\n\nconst url = domain + \"/messages\";\n\nexport const _deleteMessage = (messageId,token) => dispatch => {\n  dispatch({\n    type: DELETEMESSAGE.START\n  });\n  return fetch(url + `/${messageId}`, {\n    method: \"DELETE\",\n    headers: { ...jsonHeaders, Authorization: \"Bearer \" + token },\n    body: JSON.stringify(messageId)\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: DELETEMESSAGE.SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(\n        dispatch({ type: DELETEMESSAGE.FAIL, payload: err })\n      );\n    });\n};\nexport const deleteMessage = (messageId,token,requestTag) => dispatch => {\n  return dispatch(_deleteMessage(messageId,token)).then(() => {\n    return dispatch(getMessages(requestTag));\n  });\n};\n//kwitter-api.herokuapp.com/messages?limit=100&offset=0&username=test\nexport const getMessages = requestTag => dispatch => {\n  dispatch({\n    type: GETMESSAGES.START\n  });\n  return fetch(url + requestTag, {\n    method: \"GET\",\n    headers: jsonHeaders\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: GETMESSAGES.SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(dispatch({ type: GETMESSAGES.FAIL, payload: err }));\n    });\n};\n\nconst _postMessage = messageData => dispatch => {\n  dispatch({\n    type: POSTMESSAGE.START\n  });\n\n  const token = JSON.parse(localStorage.login).result.token;\n\n  return fetch(url, {\n    method: \"POST\",\n    headers: { ...jsonHeaders, Authorization: \"Bearer \" + token },\n    body: JSON.stringify(messageData)\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: POSTMESSAGE.SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(dispatch({ type: POSTMESSAGE.FAIL, payload: err }));\n    });\n};\n\nexport const postMessage = (messageBody, requestTag) => dispatch => {\n  return dispatch(_postMessage(messageBody)).then(() => {\n    return dispatch(getMessages(requestTag));\n  });\n};\n"]},"metadata":{},"sourceType":"module"}