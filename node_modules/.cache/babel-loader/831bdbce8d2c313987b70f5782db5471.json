{"ast":null,"code":"import _defineProperty from \"/Users/drashti/Documents/Drashti workshop/assessment---kwitter-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { domain, jsonHeaders, handleJsonResponse } from \"./constants\";\nimport { DELETEMESSAGE, GETMESSAGELIST // GETONEMESSAGE,\n, POSTMESSAGE } from \"../actionTypes\";\nvar url = domain + \"/messages\";\nexport var deleteMessage = function deleteMessage(messageId) {\n  return function (dispatch) {\n    dispatch({\n      type: DELETEMESSAGE.START\n    });\n    return fetch(url + \"/\".concat(messageId), {\n      method: \"DELETE\",\n      headers: jsonHeaders,\n      body: JSON.stringify(messageId)\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: DELETEMESSAGE.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: DELETEMESSAGE.FAIL,\n        payload: err\n      }));\n    });\n  };\n}; //kwitter-api.herokuapp.com/messages?limit=100&offset=0&username=test\n\nexport var getMessageList = function getMessageList(messageData) {\n  return function (dispatch) {\n    dispatch({\n      type: GETMESSAGELIST.START\n    });\n    return fetch(url + \"?limit=30\", {\n      method: \"GET\",\n      headers: jsonHeaders,\n      body: JSON.stringify(messageData)\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: GETMESSAGELIST.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: GETMESSAGELIST.FAIL,\n        payload: err\n      }));\n    });\n  };\n}; // export const getOneMessage = messageId => dispatch => {\n//   dispatch({\n//     type: GETONEMESSAGE.START\n//   });\n//   return fetch(url + `/${messageId}`, {\n//     method: \"GET\",\n//     headers: jsonHeaders,\n//     body: JSON.stringify(messageId)\n//   })\n//     .then(handleJsonResponse)\n//     .then(result => {\n//       return dispatch({\n//         type: GETONEMESSAGE.SUCCESS,\n//         payload: result\n//       });\n//     })\n//     .catch(err => {\n//       return Promise.reject(\n//         dispatch({ type: GETONEMESSAGE.FAIL, payload: err })\n//       );\n//     });\n// };\n\nexport var postMessage = function postMessage(messageData) {\n  return function (dispatch) {\n    dispatch({\n      type: POSTMESSAGE.START\n    });\n    var token = JSON.parse(localStorage.login).result.token;\n    return fetch(url, {\n      method: \"POST\",\n      headers: _objectSpread({}, jsonHeaders, {\n        Authorization: \"Bearer \" + token\n      }),\n      body: JSON.stringify(messageData)\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: POSTMESSAGE.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: POSTMESSAGE.FAIL,\n        payload: err\n      }));\n    });\n  };\n};","map":{"version":3,"sources":["/Users/drashti/Documents/Drashti workshop/assessment---kwitter-frontend/src/redux/actionCreators/messages.js"],"names":["domain","jsonHeaders","handleJsonResponse","DELETEMESSAGE","GETMESSAGELIST","POSTMESSAGE","url","deleteMessage","messageId","dispatch","type","START","fetch","method","headers","body","JSON","stringify","then","result","SUCCESS","payload","catch","err","Promise","reject","FAIL","getMessageList","messageData","postMessage","token","parse","localStorage","login","Authorization"],"mappings":"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","sourcesContent":["import { domain, jsonHeaders, handleJsonResponse } from \"./constants\";\nimport {\n  DELETEMESSAGE,\n  GETMESSAGELIST,\n  // GETONEMESSAGE,\n  POSTMESSAGE\n} from \"../actionTypes\";\n\nconst url = domain + \"/messages\";\n\nexport const deleteMessage = messageId => dispatch => {\n  dispatch({\n    type: DELETEMESSAGE.START\n  });\n  return fetch(url + `/${messageId}`, {\n    method: \"DELETE\",\n    headers: jsonHeaders,\n    body: JSON.stringify(messageId)\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: DELETEMESSAGE.SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(\n        dispatch({ type: DELETEMESSAGE.FAIL, payload: err })\n      );\n    });\n};\n//kwitter-api.herokuapp.com/messages?limit=100&offset=0&username=test\nexport const getMessageList = messageData => dispatch => {\n  dispatch({\n    type: GETMESSAGELIST.START\n  });\n  return fetch(url + \"?limit=30\", {\n    method: \"GET\",\n    headers: jsonHeaders,\n    body: JSON.stringify(messageData)\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: GETMESSAGELIST.SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(\n        dispatch({ type: GETMESSAGELIST.FAIL, payload: err })\n      );\n    });\n};\n// export const getOneMessage = messageId => dispatch => {\n//   dispatch({\n//     type: GETONEMESSAGE.START\n//   });\n//   return fetch(url + `/${messageId}`, {\n//     method: \"GET\",\n//     headers: jsonHeaders,\n//     body: JSON.stringify(messageId)\n//   })\n//     .then(handleJsonResponse)\n//     .then(result => {\n//       return dispatch({\n//         type: GETONEMESSAGE.SUCCESS,\n//         payload: result\n//       });\n//     })\n//     .catch(err => {\n//       return Promise.reject(\n//         dispatch({ type: GETONEMESSAGE.FAIL, payload: err })\n//       );\n//     });\n// };\nexport const postMessage = messageData => dispatch => {\n  dispatch({\n    type: POSTMESSAGE.START\n  });\n\n  const token = JSON.parse(localStorage.login).result.token;\n\n  return fetch(url, {\n    method: \"POST\",\n    headers: { ...jsonHeaders, Authorization: \"Bearer \" + token },\n    body: JSON.stringify(messageData)\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: POSTMESSAGE.SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(dispatch({ type: POSTMESSAGE.FAIL, payload: err }));\n    });\n};\n"]},"metadata":{},"sourceType":"module"}