{"ast":null,"code":"import _classCallCheck from \"/Users/drashti/Documents/Drashti workshop/assessment---kwitter-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/drashti/Documents/Drashti workshop/assessment---kwitter-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/drashti/Documents/Drashti workshop/assessment---kwitter-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/drashti/Documents/Drashti workshop/assessment---kwitter-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/drashti/Documents/Drashti workshop/assessment---kwitter-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/drashti/Documents/Drashti workshop/assessment---kwitter-frontend/src/react/components/ProfileCard.js\";\nimport React, { Component } from \"react\";\nimport \"./ProfileCard.css\";\nimport { withAsyncAction } from \"../HOCs\";\nimport { connect } from \"react-redux\";\nimport { CreatedAt, Spinner, DeleteUserButton, UploadUserPicture } from \"../components\";\n\nvar ProfileCard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ProfileCard, _Component);\n\n  function ProfileCard() {\n    _classCallCheck(this, ProfileCard);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ProfileCard).apply(this, arguments));\n  }\n\n  _createClass(ProfileCard, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getUser(this.props.profileName);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.profileName !== prevProps.profileName) {\n        this.props.getUser(this.props.profileName);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return !this.props.result ? React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        className: \"pfp-card\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"user-picture\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, this.props.pictureLocation ? React.createElement(\"img\", {\n        className: \"user-picture\",\n        src: \"https://kwitter-api.herokuapp.com\".concat(this.props.pictureLocation),\n        alt: \"user profile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }) : //////check above - may not be in right.  also, make a chained action creator where we get the user details again when we upload another picture.  make it remount.\n      React.createElement(\"img\", {\n        className: \"user-picture\",\n        src: \"https://cdn.pixabay.com/photo/2018/04/22/22/57/hacker-3342696_960_720.jpg\",\n        alt: \"user profile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"user-names\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        id: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }, \"Username:\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, this.props.username), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, \"Display Name:\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, this.props.displayName), React.createElement(\"h4\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51\n        },\n        __self: this\n      }, \"joined:\"), React.createElement(CreatedAt, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"bio\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, this.props.about ? \"Bio: \" + this.props.about : React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, \"\\\"No bio provided by this user\\\"\")), React.createElement(DeleteUserButton, {\n        username: this.props.username,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }), React.createElement(UploadUserPicture, {\n        username: this.props.username,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ProfileCard;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  if (state.users.getUser.result) {\n    return {\n      loggedIn: state.auth.login.result.username,\n      username: state.users.getUser.result.user.username,\n      pictureLocation: state.users.getUser.result.user.pictureLocation,\n      displayName: state.users.getUser.result.user.displayName,\n      about: state.users.getUser.result.user.about,\n      googleId: state.users.getUser.result.user.googleId,\n      createdAt: state.users.getUser.result.user.createdAt,\n      updatedAt: state.users.getUser.result.user.updatedAt\n    };\n  } else return {};\n};\n\nexport default connect(mapStateToProps)(withAsyncAction(\"users\", \"getUser\")(ProfileCard));","map":{"version":3,"sources":["/Users/drashti/Documents/Drashti workshop/assessment---kwitter-frontend/src/react/components/ProfileCard.js"],"names":["React","Component","withAsyncAction","connect","CreatedAt","Spinner","DeleteUserButton","UploadUserPicture","ProfileCard","props","getUser","profileName","prevProps","result","pictureLocation","username","displayName","about","mapStateToProps","state","users","loggedIn","auth","login","user","googleId","createdAt","updatedAt"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./ProfileCard.css\";\nimport { withAsyncAction } from \"../HOCs\";\nimport { connect } from \"react-redux\";\nimport {\n  CreatedAt,\n  Spinner,\n  DeleteUserButton,\n  UploadUserPicture\n} from \"../components\";\n\nclass ProfileCard extends Component {\n  componentDidMount() {\n    this.props.getUser(this.props.profileName);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.profileName !== prevProps.profileName) {\n      this.props.getUser(this.props.profileName);\n    }\n  }\n\n  render() {\n    return !this.props.result ? (\n      <Spinner />\n    ) : (\n      <div className=\"pfp-card\">\n        <div className=\"user-picture\">\n          {this.props.pictureLocation ? (\n            <img\n              className=\"user-picture\"\n              src={`https://kwitter-api.herokuapp.com${this.props.pictureLocation}`}\n              alt=\"user profile\"\n            />\n          ) : (\n            //////check above - may not be in right.  also, make a chained action creator where we get the user details again when we upload another picture.  make it remount.\n            <img\n              className=\"user-picture\"\n              src={\n                \"https://cdn.pixabay.com/photo/2018/04/22/22/57/hacker-3342696_960_720.jpg\"\n              }\n              alt=\"user profile\"\n            />\n          )}\n        </div>\n        <div className=\"user-names\">\n          <p id >Username:</p>\n          <h2>{this.props.username}</h2>\n          <p>Display Name:</p>\n          <h2>{this.props.displayName}</h2>\n          <h4>joined:</h4>\n          <CreatedAt />\n        </div>\n        <div className=\"bio\">\n          {this.props.about ? (\n            \"Bio: \" + this.props.about\n          ) : (\n            <p>\"No bio provided by this user\"</p>\n          )}\n        </div>\n\n        <DeleteUserButton username={this.props.username} />\n        <UploadUserPicture username={this.props.username} />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  if (state.users.getUser.result) {\n    return {\n      loggedIn: state.auth.login.result.username,\n      username: state.users.getUser.result.user.username,\n      pictureLocation: state.users.getUser.result.user.pictureLocation,\n      displayName: state.users.getUser.result.user.displayName,\n      about: state.users.getUser.result.user.about,\n      googleId: state.users.getUser.result.user.googleId,\n      createdAt: state.users.getUser.result.user.createdAt,\n      updatedAt: state.users.getUser.result.user.updatedAt\n    };\n  } else return {};\n};\n\nexport default connect(mapStateToProps)(\n  withAsyncAction(\"users\", \"getUser\")(ProfileCard)\n);\n"]},"metadata":{},"sourceType":"module"}