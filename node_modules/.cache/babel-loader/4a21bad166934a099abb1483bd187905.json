{"ast":null,"code":"import { domain, jsonHeaders, handleJsonResponse } from \"./constants\";\nimport { GETUSER } from \"../actionTypes\";\nvar url = domain + \"/users\";\nexport var getUser = function getUser(userName) {\n  return function (dispatch) {\n    dispatch({\n      type: GETUSER.START\n    });\n    return fetch(url + \"/\" + userName, {\n      method: \"GET\",\n      headers: jsonHeaders // body: JSON.stringify(userName)   // - this isn't on the demo\n\n    }).then(handleJsonResponse).then(function (result) {\n      return dispatch({\n        type: GETUSER.SUCCESS,\n        payload: result\n      });\n    }).catch(function (err) {\n      return Promise.reject(dispatch({\n        type: GETUSER.FAIL,\n        payload: err\n      }));\n    });\n  };\n};\nexport var createUser = function createUser(userData) {\n  return fetch(url, {\n    method: \"POST\",\n    headers: jsonHeaders,\n    body: JSON.stringify(userData)\n  }).then(function (result) {\n    return resl;\n  }).then(function (result) {\n    if (result) return dispatch({\n      type: GETUSER.SUCCESS,\n      payload: result\n    });\n  }).catch(function (err) {\n    return Promise.reject(dispatch({\n      type: GETUSER.FAIL,\n      payload: err\n    }));\n  });\n};","map":{"version":3,"sources":["/Users/drashti/Documents/Drashti workshop/assessment---kwitter-frontend/src/redux/actionCreators/users.js"],"names":["domain","jsonHeaders","handleJsonResponse","GETUSER","url","getUser","userName","dispatch","type","START","fetch","method","headers","then","result","SUCCESS","payload","catch","err","Promise","reject","FAIL","createUser","userData","body","JSON","stringify","resl"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,WAAjB,EAA8BC,kBAA9B,QAAwD,aAAxD;AACA,SAASC,OAAT,QAAwB,gBAAxB;AAEA,IAAMC,GAAG,GAAGJ,MAAM,GAAG,QAArB;AAEA,OAAO,IAAMK,OAAO,GAAG,SAAVA,OAAU,CAAAC,QAAQ;AAAA,SAAI,UAAAC,QAAQ,EAAI;AAC7CA,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEL,OAAO,CAACM;AADP,KAAD,CAAR;AAIA,WAAOC,KAAK,CAACN,GAAG,GAAG,GAAN,GAAYE,QAAb,EAAuB;AACjCK,MAAAA,MAAM,EAAE,KADyB;AAEjCC,MAAAA,OAAO,EAAEX,WAFwB,CAGjC;;AAHiC,KAAvB,CAAL,CAKJY,IALI,CAKCX,kBALD,EAMJW,IANI,CAMC,UAAAC,MAAM,EAAI;AACd,aAAOP,QAAQ,CAAC;AACdC,QAAAA,IAAI,EAAEL,OAAO,CAACY,OADA;AAEdC,QAAAA,OAAO,EAAEF;AAFK,OAAD,CAAf;AAID,KAXI,EAYJG,KAZI,CAYE,UAAAC,GAAG,EAAI;AACZ,aAAOC,OAAO,CAACC,MAAR,CAAeb,QAAQ,CAAC;AAAEC,QAAAA,IAAI,EAAEL,OAAO,CAACkB,IAAhB;AAAsBL,QAAAA,OAAO,EAAEE;AAA/B,OAAD,CAAvB,CAAP;AACD,KAdI,CAAP;AAeD,GApB8B;AAAA,CAAxB;AAsBP,OAAO,IAAMI,UAAU,GAAG,SAAbA,UAAa,CAAAC,QAAQ,EAAI;AACpC,SAAOb,KAAK,CAACN,GAAD,EAAM;AAChBO,IAAAA,MAAM,EAAE,MADQ;AAEhBC,IAAAA,OAAO,EAAEX,WAFO;AAGhBuB,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeH,QAAf;AAHU,GAAN,CAAL,CAKJV,IALI,CAKC,UAAAC,MAAM,EAAI;AACd,WAAOa,IAAP;AACD,GAPI,EAQJd,IARI,CAQC,UAAAC,MAAM,EAAI;AACd,QAAGA,MAAH,EACA,OAAOP,QAAQ,CAAC;AACdC,MAAAA,IAAI,EAAEL,OAAO,CAACY,OADA;AAEdC,MAAAA,OAAO,EAAEF;AAFK,KAAD,CAAf;AAID,GAdI,EAeJG,KAfI,CAeE,UAAAC,GAAG,EAAI;AACZ,WAAOC,OAAO,CAACC,MAAR,CAAeb,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEL,OAAO,CAACkB,IAAhB;AAAsBL,MAAAA,OAAO,EAAEE;AAA/B,KAAD,CAAvB,CAAP;AACD,GAjBI,CAAP;AAkBD,CAnBM","sourcesContent":["import { domain, jsonHeaders, handleJsonResponse } from \"./constants\";\nimport { GETUSER } from \"../actionTypes\";\n\nconst url = domain + \"/users\";\n\nexport const getUser = userName => dispatch => {\n  dispatch({\n    type: GETUSER.START\n  });\n\n  return fetch(url + \"/\" + userName, {\n    method: \"GET\",\n    headers: jsonHeaders\n    // body: JSON.stringify(userName)   // - this isn't on the demo\n  })\n    .then(handleJsonResponse)\n    .then(result => {\n      return dispatch({\n        type: GETUSER.SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(dispatch({ type: GETUSER.FAIL, payload: err }));\n    });\n};\n\nexport const createUser = userData => {\n  return fetch(url, {\n    method: \"POST\",\n    headers: jsonHeaders,\n    body: JSON.stringify(userData)\n  })\n    .then(result => {\n      return resl\n    })\n    .then(result => {\n      if(result)\n      return dispatch({\n        type: GETUSER.SUCCESS,\n        payload: result\n      });\n    })\n    .catch(err => {\n      return Promise.reject(dispatch({ type: GETUSER.FAIL, payload: err }));\n    });\n};\n"]},"metadata":{},"sourceType":"module"}