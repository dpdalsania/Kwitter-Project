{"ast":null,"code":"import { connectedRouterRedirect } from \"redux-auth-wrapper/history4/redirect\";\nvar userIsNotAuthenticated = connectedRouterRedirect({\n  // This sends the user either to the query param route if we have one, or to the landing page if none is specified and the user is already logged in\n  //change this to message feed page once done\n  redirectPath: function redirectPath(state, ownProps) {\n    return \"/profile/\".concat(state.auth && state.auth.login && state.auth.login.result && state.auth.login.result.username);\n  },\n  // This prevents us from adding the query parameter when we send the user away from the login page\n  allowRedirectBack: false,\n  // If selector is true, wrapper will not redirect\n  // So if there is no user data, then we show the page\n  authenticatedSelector: function authenticatedSelector(state) {\n    return state.auth && state.auth.login && state.auth.login.result === null;\n  },\n  // A nice display name for this check\n  wrapperDisplayName: \"UserIsNotAuthenticated\"\n});\nexport default userIsNotAuthenticated;","map":{"version":3,"sources":["/Users/drashti/Documents/Drashti workshop/assessment---kwitter-frontend/src/react/HOCs/userIsNotAuthenticated.js"],"names":["connectedRouterRedirect","userIsNotAuthenticated","redirectPath","state","ownProps","auth","login","result","username","allowRedirectBack","authenticatedSelector","wrapperDisplayName"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,sCAAxC;AAEA,IAAMC,sBAAsB,GAAGD,uBAAuB,CAAC;AACrD;AAGA;AACAE,EAAAA,YAAY,EAAE,sBAACC,KAAD,EAAQC,QAAR;AAAA,8BACAD,KAAK,CAACE,IAAN,IACVF,KAAK,CAACE,IAAN,CAAWC,KADD,IAEVH,KAAK,CAACE,IAAN,CAAWC,KAAX,CAAiBC,MAFP,IAGVJ,KAAK,CAACE,IAAN,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,QAJd;AAAA,GALuC;AAUrD;AACAC,EAAAA,iBAAiB,EAAE,KAXkC;AAYrD;AACA;AACAC,EAAAA,qBAAqB,EAAE,+BAAAP,KAAK;AAAA,WAC1BA,KAAK,CAACE,IAAN,IAAcF,KAAK,CAACE,IAAN,CAAWC,KAAzB,IAAkCH,KAAK,CAACE,IAAN,CAAWC,KAAX,CAAiBC,MAAjB,KAA4B,IADpC;AAAA,GAdyB;AAgBrD;AACAI,EAAAA,kBAAkB,EAAE;AAjBiC,CAAD,CAAtD;AAoBA,eAAeV,sBAAf","sourcesContent":["import { connectedRouterRedirect } from \"redux-auth-wrapper/history4/redirect\";\n\nconst userIsNotAuthenticated = connectedRouterRedirect({\n  // This sends the user either to the query param route if we have one, or to the landing page if none is specified and the user is already logged in\n  \n\n  //change this to message feed page once done\n  redirectPath: (state, ownProps) =>\n    `/profile/${state.auth &&\n      state.auth.login &&\n      state.auth.login.result &&\n      state.auth.login.result.username}`,\n  // This prevents us from adding the query parameter when we send the user away from the login page\n  allowRedirectBack: false,\n  // If selector is true, wrapper will not redirect\n  // So if there is no user data, then we show the page\n  authenticatedSelector: state =>\n    state.auth && state.auth.login && state.auth.login.result === null,\n  // A nice display name for this check\n  wrapperDisplayName: \"UserIsNotAuthenticated\"\n});\n\nexport default userIsNotAuthenticated;\n"]},"metadata":{},"sourceType":"module"}